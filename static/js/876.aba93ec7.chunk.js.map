{"version":3,"file":"static/js/876.aba93ec7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/Loaders/LoaderButton.jsx","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","webpack://react-homework-template/./src/pages/AuthPage/AuthPage.module.css?5b0f","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"formWrap\":\"LoginForm_formWrap__rwknX\",\"formWrapImput\":\"LoginForm_formWrapImput__9GZUV\",\"formImput\":\"LoginForm_formImput__rOtvQ\",\"error\":\"LoginForm_error__012y+\",\"formBtn\":\"LoginForm_formBtn__HRL1P\",\"errors\":\"LoginForm_errors__26OED\",\"icon\":\"LoginForm_icon__TSGuZ\"};","import { ThreeDots } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nexport const LoaderButton = () => {\n  return (\n    <div className={css.containerBtn}>\n      <ThreeDots\n        visible={true}\n        height=\"20\"\n        width=\"20\"\n        color=\"#4fa94d\"\n        radius=\"9\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n      />\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport css from './LoginForm.module.css';\nimport sprite from '../../images/sprite.svg';\nimport { logIn } from '../../redux/auth/authOperations.js';\nimport { useDispatch } from 'react-redux';\nimport { LoaderButton } from 'components/Loaders/LoaderButton';\nimport toast from 'react-hot-toast';\n\nconst schema = yup.object().shape({\n  email: yup.string().email('Invalid email').required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .required('Password is required'),\n});\n\nexport const LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    setError,\n    clearErrors,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = async data => {\n    try {\n      setIsLoading(true);\n      await dispatch(logIn(data)).unwrap();\n      toast.success('Login successful!');\n      navigate('/home');\n    } catch (error) {\n      console.error('Failed to log in:', error);\n      setError('server', {\n        type: 'manual',\n        message: 'Failed to log in. Please try again.',\n      });\n      setIsLoading(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleShowPassword = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  const handleEmailValidation = e => {\n    const email = e.target.value;\n    if (!email) {\n      clearErrors('email');\n      return;\n    }\n    const isValid = schema.fields.email.isValidSync(email);\n    if (!isValid) {\n      setError('email', { type: 'manual', message: 'Invalid email' });\n    } else {\n      clearErrors('email');\n    }\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit(onSubmit)} noValidate>\n      <div className={css.formWrap}>\n        <div className={css.formWrapImput}>\n          <input\n            className={`${css.formImput} ${errors.email ? css.error : ''}`}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            {...register('email', { onBlur: handleEmailValidation })}\n          />\n          {errors.email && <p className={css.errors}>{errors.email.message}</p>}\n        </div>\n        <div className={css.formWrapImput}>\n          <input\n            className={`${css.formImput} ${errors.password ? css.error : ''}`}\n            type={showPassword ? 'text' : 'password'}\n            {...register('password')}\n            placeholder=\"Create a password\"\n          />\n          <svg\n            className={css.icon}\n            width=\"20\"\n            height=\"20\"\n            onClick={toggleShowPassword}\n          >\n            <use\n              xlinkHref={`${sprite}#${\n                showPassword ? 'icon-eye' : 'icon-eye-off'\n              }`}\n            ></use>\n          </svg>\n          {errors.password && (\n            <p className={css.errors}>{errors.password.message}</p>\n          )}\n        </div>\n      </div>\n      <button className={css.formBtn} type=\"submit\" disabled={isLoading}>\n        {isLoading ? <LoaderButton /> : 'Log In Now'}\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"formWrap\":\"RegisterForm_formWrap__-xhtQ\",\"formWrapImput\":\"RegisterForm_formWrapImput__nRAoZ\",\"formImput\":\"RegisterForm_formImput__VXz-r\",\"error\":\"RegisterForm_error__yDHjz\",\"formBtn\":\"RegisterForm_formBtn__uyMmA\",\"errors\":\"RegisterForm_errors__HjC8F\",\"icon\":\"RegisterForm_icon__Xn6st\"};","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport css from './RegisterForm.module.css';\nimport sprite from '../../images/sprite.svg';\nimport { register as registerUser } from '../../redux/auth/authOperations';\nimport { useDispatch } from 'react-redux';\nimport { LoaderButton } from 'components/Loaders/LoaderButton';\nimport toast from 'react-hot-toast';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters')\n    .required('Name is required'),\n  email: yup.string().email('Invalid email').required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .required('Password is required'),\n});\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    setError,\n    clearErrors,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = async data => {\n    try {\n      setIsLoading(true);\n      await dispatch(registerUser(data)).unwrap();\n      toast.success('Registration successful!');\n      navigate('/home');\n    } catch (error) {\n      if (error.response && error.response.status === 409) {\n        toast.error('User already registered. Please log in.');\n      } else {\n        toast.error('Failed to register. Please try again.');\n      }\n      setIsLoading(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleShowPassword = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  const handleEmailValidation = e => {\n    const email = e.target.value;\n    if (!email) {\n      clearErrors('email');\n      return;\n    }\n    const isValid = schema.fields.email.isValidSync(email);\n    if (!isValid) {\n      setError('email', { type: 'manual', message: 'Invalid email' });\n    } else {\n      clearErrors('email');\n    }\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit(onSubmit)} noValidate>\n      <div className={css.formWrap}>\n        <div className={css.formWrapImput}>\n          <input\n            className={`${css.formImput} ${errors.name ? css.error : ''}`}\n            placeholder=\"Enter your name\"\n            type=\"text\"\n            name=\"name\"\n            {...register('name')}\n          />\n          {errors.name && <p className={css.errors}>{errors.name.message}</p>}\n        </div>\n        <div className={css.formWrapImput}>\n          <input\n            className={`${css.formImput} ${errors.email ? css.error : ''}`}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            {...register('email', { onBlur: handleEmailValidation })}\n          />\n          {errors.email && <p className={css.errors}>{errors.email.message}</p>}\n        </div>\n        <div className={css.formWrapImput}>\n          <input\n            className={`${css.formImput} ${errors.password ? css.error : ''}`}\n            type={showPassword ? 'text' : 'password'}\n            {...register('password')}\n            placeholder=\"Create a password\"\n          />\n          <svg\n            className={css.icon}\n            width=\"20\"\n            height=\"20\"\n            onClick={toggleShowPassword}\n          >\n            <use\n              xlinkHref={`${sprite}#${\n                showPassword ? 'icon-eye' : 'icon-eye-off'\n              }`}\n            ></use>\n          </svg>\n          {errors.password && (\n            <p className={css.errors}>{errors.password.message}</p>\n          )}\n        </div>\n      </div>\n      <button className={css.formBtn} type=\"submit\" disabled={isLoading}>\n        {isLoading ? <LoaderButton /> : 'Register Now'}\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"AuthPage_section__RGWYc\",\"wrapper\":\"AuthPage_wrapper__j9zCo\",\"nav\":\"AuthPage_nav__RtCht\",\"link\":\"AuthPage_link__HQ0pz\",\"activeLink\":\"AuthPage_activeLink__9sdnw\"};","import { Routes, Route, NavLink } from 'react-router-dom';\nimport { LoginForm } from '../../components/LoginForm/LoginForm';\nimport { RegisterForm } from '../../components/RegisterForm/RegisterForm';\nimport clsx from 'clsx';\nimport css from './AuthPage.module.css';\n\nconst AuthPage = () => (\n  <section className={css.section}>\n    <div className={css.wrapper}>\n      <nav className={css.nav}>\n        <NavLink\n          className={({ isActive }) =>\n            clsx(css.link, { [css.activeLink]: isActive })\n          }\n          to=\"/auth/register\"\n        >\n          Register\n        </NavLink>\n        <NavLink\n          className={({ isActive }) =>\n            clsx(css.link, { [css.activeLink]: isActive })\n          }\n          to=\"/auth/login\"\n        >\n          Log In\n        </NavLink>\n      </nav>\n      <Routes>\n        <Route path=\"login\" element={<LoginForm />} />\n        <Route path=\"register\" element={<RegisterForm />} />\n      </Routes>\n    </div>\n  </section>\n);\n\nexport default AuthPage;\n"],"names":["LoaderButton","_jsx","className","css","children","ThreeDots","visible","height","width","color","radius","ariaLabel","wrapperStyle","wrapperClass","schema","yup","shape","email","required","password","min","LoginForm","showPassword","setShowPassword","useState","navigate","useNavigate","dispatch","useDispatch","isLoading","setIsLoading","register","handleSubmit","setError","clearErrors","formState","errors","useForm","resolver","yupResolver","_jsxs","onSubmit","async","logIn","data","unwrap","toast","error","console","type","message","noValidate","concat","name","placeholder","onBlur","e","target","value","fields","isValidSync","onClick","toggleShowPassword","prevState","xlinkHref","sprite","disabled","RegisterForm","registerUser","response","status","AuthPage","NavLink","_ref","isActive","clsx","to","_ref2","Routes","Route","path","element"],"sourceRoot":""}